{
	"info": {
		"_postman_id": "92761441-6d0c-4fc6-aa04-73eccf6afd4c",
		"name": "Interledger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "23674746-92761441-6d0c-4fc6-aa04-73eccf6afd4c"
	},
	"item": [
		{
			"name": "Rafiki Admin APIs",
			"item": [
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7beece0-0845-4132-8a9c-d953845e4d53",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"assetId\", body.data.createAsset.asset.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "81263129-27d9-4dd2-b624-653f258c60c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateAsset($input: CreateAssetInput!) {\n  createAsset(input: $input) {\n    asset {\n      code\n      createdAt\n      id\n      scale\n      withdrawalThreshold\n      liquidityThreshold\n    }\n    code\n    message\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"code\": \"USD\",\n    \"scale\": 6,\n    \"withdrawalThreshold\": null,\n    \"liquidityThreshold\": \"100000000\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0bd8a21-0e47-4a33-a75d-c80c51c02ec6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7925e823-1225-4b8d-96e9-7a06b7442d4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateAsset($input: UpdateAssetInput!) {\n  updateAsset(input: $input) {\n    asset {\n      code\n      createdAt\n      id\n      scale\n      withdrawalThreshold\n      liquidityThreshold\n    }\n    code\n    message\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{assetId}}\",\n    \"withdrawalThreshold\": 100,\n    \"liquidityThreshold\": 100\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset",
					"id": "9a2ee1b5-c91d-4c61-b536-f6af1871ed5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAsset($id: String!) {\n    asset(id: $id) {\n    code\n    createdAt\n    id\n    scale\n    withdrawalThreshold\n    liquidityThreshold\n    sendingFee {\n        id\n        type\n        basisPoints\n        fixed\n    }\n    receivingFee {\n        id\n        type\n        basisPoints\n        fixed\n    }\n  }\n}",
								"variables": "{\n    \"id\": \"{{assetId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assets",
					"id": "7e717c57-3529-4dca-b372-415e78075f2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAssets($after: String, $before: String, $first: Int, $last: Int) {\n    assets(after: $after, before: $before, first:$first, last: $last) {\n        edges {\n            cursor\n            node {\n                code\n                createdAt\n                id\n                scale\n                withdrawalThreshold\n                liquidityThreshold\n                liquidity\n                sendingFee {\n                    id\n                    type\n                    basisPoints\n                    fixed\n                }\n                receivingFee {\n                    id\n                    type\n                    basisPoints\n                    fixed\n                }\n            }\n        }\n        pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n        }\n    }\n}",
								"variables": "{\n  \"after\": null,\n  \"before\": null,\n  \"first\": null,\n  \"last\": null\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Asset Liquidity",
					"id": "73f9fba0-002e-435b-bf71-9ff48b93519c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DepositAssetLiquidity ($input: DepositAssetLiquidityInput!) {\n  depositAssetLiquidity(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"3615a385-4c7e-43ec-9d66-f5d2e421108a\",\n    \"assetId\": \"{{assetId}}\",\n    \"amount\": \"1000000\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Asset Liquidity",
					"id": "09727e49-de3e-4f4d-ba9e-58896184cbf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateAssetLiquidityWithdrawal ($input: CreateAssetLiquidityWithdrawalInput!) {\n  createAssetLiquidityWithdrawal(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"b97fd85a-126e-42ef-b40d-1a50a70ffa6f\",\n    \"assetId\": \"{{assetId}}\",\n    \"amount\": \"100\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Fee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6664b3a-d748-4652-a3c0-528cc72b64ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "455c4fad-0bf1-4658-b960-d9a3a90fed8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetFee($input: SetFeeInput!) {\n    setFee(input: $input) {\n        code\n        success\n        message\n        fee {\n            id\n            assetId\n            type\n            fixed\n            basisPoints\n            createdAt\n        }\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"assetId\": \"{{assetId}}\",\n        \"type\": \"SENDING\",\n        \"fee\": {\n          \"fixed\": 100,\n          \"basisPoints\": 100\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Peer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3f9c622-e41d-488a-8b61-dfe3bce630fa",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"peerId\", body.data.createPeer.peer.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59b4c4f4-9ee9-4677-8c3a-9d98dc7f4e80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePeer ($input: CreatePeerInput!) {\n    createPeer (input: $input) {\n        code\n        message\n        success\n        peer {\n            id\n            name\n            liquidity\n            liquidityThreshold\n            asset{\n                id\n                scale\n                code\n                withdrawalThreshold\n            }\n        }\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"name\": \"Wallet1\",\n    \"staticIlpAddress\": \"test.peer\",\n    \"http\": {\n      \"incoming\": {\"authTokens\": [\"test123abc\"]},\n      \"outgoing\": {\"endpoint\": \"http://peer-backend:3002\", \"authToken\": \"test123abc\"}\n    },\n    \"assetId\": \"{{assetId}}\",\n    \"maxPacketAmount\": 1000,\n    \"liquidityThreshold\": 100000000,\n    \"initialLiquidity\": 200000000\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Or Update Peer By Url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2db2f487-09c4-4ef0-9a40-c888bc8baf32",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"peerId\", body.data.createOrUpdatePeerByUrl.peer.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4a8971a-581d-4b37-bd69-bf45caab0d5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateOrUpdatePeerByUrl ($input: CreateOrUpdatePeerByUrlInput!) {\n    createOrUpdatePeerByUrl (input: $input) {\n        code\n        message\n        success\n        peer {\n            id\n            name\n            asset {\n                id\n                scale\n                code\n                withdrawalThreshold\n            }\n        }\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"peerUrl\": \"http://happy-life-bank-backend:3005\",\n    \"assetId\": \"{{assetId}}\",\n    \"liquidityToDeposit\": 100000\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Peer",
					"id": "f899c8d4-43ef-45d3-b66c-9e075b4be306",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdatePeer ($input: UpdatePeerInput!){  \n  updatePeer(input: $input) {\n    code\n    success\n    message\n    peer {\n      id\n      name\n      http {\n        outgoing {\n          authToken\n          endpoint\n        }\n      }\n      liquidity\n      liquidityThreshold\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{peerId}}\",\n    \"name\": \"Wall-y\",\n    \"http\": {\n      \"incoming\": {\"authTokens\": [\"test-123\"]},\n      \"outgoing\": {\"endpoint\": \"http://peer-backend:3002\", \"authToken\": \"test\"}\n    },\n    \"maxPacketAmount\": 1000,\n    \"liquidityThreshold\": 100\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Peer",
					"id": "d4edc971-891b-48b4-98bf-4ddf83519b28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPeer {\n  peer (id: \"{{peerId}}\") {\n    id\n    name\n    http {\n      outgoing {\n        authToken\n        endpoint\n      }\n    }\n    liquidity\n    liquidityThreshold\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Peers",
					"id": "5f730f89-05c3-4ca3-864d-7c3203ee0b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPeers {\n    peers {\n        edges {\n            cursor\n            node {\n                id\n                name\n                asset {\n                    code\n                    scale\n                }\n                liquidity\n                liquidityThreshold\n                staticIlpAddress\n                http {\n                    outgoing {\n                        authToken\n                        endpoint\n                    }\n                }\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Peer",
					"id": "9a68ce2a-7f79-4a1e-bc92-6cb5c54d6637",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeletePeer($input: DeletePeerInput!) {\n  deletePeer(input: $input) {\n    code\n    message\n    success\n  }\n}\n",
								"variables": "{\n    \"input\": {\n        \"id\": \"{{peerId}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Peer Liquidity",
					"id": "75121e3c-df95-4739-843b-e8afcea8b543",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DepositPeerLiquidity ($input: DepositPeerLiquidityInput!) {\n  depositPeerLiquidity(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"a09b730d-8610-4fda-98fa-ec7acb19c775\",\n    \"peerId\": \"{{peerId}}\",\n    \"amount\": \"1000000\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Peer Liquidity",
					"id": "559a8b1f-7f97-4555-afec-1a2955c5a2cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePeerLiquidityWithdrawal ($input: CreatePeerLiquidityWithdrawalInput!) {\n  createPeerLiquidityWithdrawal(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n    \"peerId\": \"{{peerId}}\",\n    \"amount\": \"100\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Liquidity Withdrawal",
					"id": "cf1a305a-9717-4946-ae44-cefd2dff1d84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation PostLiquidityWithdrawal($input: PostLiquidityWithdrawalInput!) {\n  postLiquidityWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"withdrawalId\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void Liquidity Withdrawal",
					"id": "1e87e7d9-3333-45ad-9d8b-dbbc4cdc0288",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation VoidLiquidityWithdrawal($input: VoidLiquidityWithdrawalInput!) {\n  voidLiquidityWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"withdrawalId\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Wallet Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca4eb433-63f8-46b3-a6c4-2367a518e7df",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"walletAddressId\", body.data.createWalletAddress.walletAddress.id);",
									"pm.expect(pm.environment.get(\"walletAddressId\")).to.be.a('string');",
									"",
									"pm.environment.set(\"walletAddressUrl\", body.data.createWalletAddress.walletAddress.url);",
									"pm.expect(pm.environment.get(\"walletAddressUrl\")).to.be.a('string');",
									"",
									"pm.environment.set(\"createWalletAddressRequest\", pm.request);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "68d8e1e3-d299-4f81-bb96-79ae9d91d550",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "605138a9-55d1-4941-b42b-e30b7a9e8a17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateWalletAddres($input: CreateWalletAddressInput!) {\n  createWalletAddress(input: $input) {\n    code\n    success\n    message\n    walletAddress {\n      id\n      createdAt\n      publicName\n      url\n      status\n      asset {\n        code\n        createdAt\n        id\n        scale\n        withdrawalThreshold\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"assetId\": \"{{assetId}}\",\n    \"url\": \"https://{{senderOpenPaymentsHost}}/timon/{{$randomInt}}\",\n    \"publicName\": \"Timon\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Wallet Address",
					"id": "eb22cc86-4f38-4f47-84e0-f52d99a5afc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateWalletAddress($input: UpdateWalletAddressInput!) {\n    updateWalletAddress(input: $input) {\n        code\n        message\n        walletAddress {\n            id\n            asset {\n                id\n                code\n                scale\n                withdrawalThreshold\n                createdAt\n            }\n            url\n            publicName\n            createdAt\n            status\n        }\n        success\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{walletAddressId}}\",\n    \"publicName\": \"New Name\",\n    \"status\": \"ACTIVE\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Wallet Address",
					"id": "31905ce9-5d03-4976-a8b8-ce35d7c54b31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWalletAddress($id: String!) {\n    walletAddress(id: $id) {\n        id\n        asset {\n            id\n            code\n            scale\n            withdrawalThreshold\n            createdAt\n        }\n        createdAt\n        incomingPayments {\n            edges {\n                node {\n                    id\n                    state\n                    incomingAmount {\n                        value\n                    }\n                    receivedAmount {\n                        value\n                    }\n                }\n                cursor\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n        }\n        status\n    }\n}",
								"variables": "{\n    \"id\": \"{{walletAddressId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Wallet Addresses",
					"id": "5fdaeaf7-6292-43af-8f35-c2a26d7870c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWalletAddresses {\n    walletAddresses {\n        edges {\n            cursor\n            node {\n                id\n                publicName\n                url\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Wallet Address Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f1a5cb9-1ca3-414c-932b-9aaa27e5f961",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"walletAddressKeyId\", body.data.createWalletAddressKey.walletAddressKey.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "24ea0af1-a672-47df-b59c-66e2481ed5f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateWalletAddressKey ($input: CreateWalletAddressKeyInput!) {\n    createWalletAddressKey(input: $input) {\n        code\n        message\n        success\n        walletAddressKey {\n            id\n            revoked\n            walletAddressId\n            createdAt\n            jwk {\n                alg\n                crv\n                kid\n                kty\n                x\n            }\n        }\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"walletAddressId\": \"{{walletAddressId}}\",\n        \"jwk\": {\n            \"alg\": \"EdDSA\",\n            \"crv\": \"Ed25519\",\n            \"kid\": \"kid_dad93e7f-f40b-484d-99d2-df12c8523176\",\n            \"kty\": \"OKP\", \n            \"x\": \"ubqoInifJ5sssIPPnQR1gVPfmoZnJtPhTkyMXNoJF_8\"\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Wallet Address Key",
					"id": "75c6d1e9-0286-4fbf-a5f0-0b9c599386d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RevokeWalletAddressKey ($input: RevokeWalletAddressKeyInput!) {\n    revokeWalletAddressKey (input: $input) {\n        code\n        message\n        success\n        walletAddressKey {\n            id\n            revoked\n            walletAddressId\n            createdAt\n        }\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"id\": \"{{walletAddressKeyId}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Incoming Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0927b85f-312f-49b2-a957-b81d56a62e15",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"incomingPaymentId\", body.data.createIncomingPayment.payment.id);",
									"pm.expect(pm.environment.get(\"incomingPaymentId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43780943-82da-4e7a-a51c-ad79b052b5fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateIncomingPayment ($input: CreateIncomingPaymentInput!) {\n    createIncomingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      walletAddressId\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"expiresAt\": null,\n    \"metadata\": {\n        \"externalRef\": null, \n        \"description\": \"Hello World\"\n    },\n    \"incomingAmount\": null,\n    \"walletAddressId\": \"{{walletAddressId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Incoming Payment",
					"id": "0ab43f12-45bb-4377-9888-d9c5d7a56902",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetIncomingPayment($id: String!) {\nincomingPayment(id: $id) {\n    id\n    walletAddressId\n    state\n    expiresAt\n    incomingAmount {\n        value\n        assetCode\n        assetScale\n    }\n    receivedAmount {\n        value\n        assetCode\n        assetScale\n    }\n    metadata\n    createdAt\n  }\n}",
								"variables": "{\n    \"id\": \"{{incomingPaymentId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Receiver (remote Incoming Payment)",
					"id": "aa35e984-5387-4e81-92d2-4d3922ae93d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateReceiver($input: CreateReceiverInput!) {\n  createReceiver(input: $input) {\n    code\n    message\n    receiver {\n      completed\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      walletAddressUrl\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      updatedAt\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"expiresAt\": null,\n    \"metadata\": {\n        \"description\": \"Hello my friend\",\n        \"externalRef\": null\n    },\n    \"incomingAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 2,\n      \"value\": 100\n    },\n    \"walletAddressUrl\": \"https://happy-life-bank-backend/accounts/pfry\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8c98663-e700-4706-84bd-6c91c5d02f6d",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"quoteId\", body.data.createQuote.quote.id);",
									"pm.expect(pm.environment.get(\"quoteId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a545b096-9709-4f48-89ab-d1edd79a295f",
								"exec": [
									"// Create an additional wallet address to represent the account that will be sending money",
									"",
									"// Reset the uniqueWalletAddress value",
									"pm.environment.set(\"uniqueWalletAddress\", Math.floor(Math.random() * (1001)));",
									"",
									"const initialRequest = pm.environment.get(\"createWalletAddressRequest\");",
									"",
									"const postRequest = {",
									"  url: initialRequest.url,",
									"  method: initialRequest.method,",
									"  body: {",
									"    mode: 'graphql',",
									"    graphql: {",
									"        query: initialRequest.body.graphql.query,",
									"        variables: JSON.stringify({",
									"            \"input\": {",
									"                \"assetId\": pm.environment.get(\"assetId\"),",
									"                \"url\": \"https://\" + pm.environment.get(\"OpenPaymentsHost\") + \"/simon/\" + pm.environment.get(\"uniqueWalletAddress\"),",
									"                \"publicName\": \"Simon\"",
									"            }",
									"        })",
									"    }",
									"  }",
									"};",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    const body = response.json();",
									"    pm.test('response should be okay to process', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(body.data.createWalletAddress.code).to.equal('200');",
									"        pm.expect(body.data.createWalletAddress.success).to.equal(true);",
									"    });",
									"    pm.environment.set(\"secondWalletAddressId\", body.data.createWalletAddress.walletAddress.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af65fbd8-82f5-4d2f-9b11-55f53045c0e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    code\n    message\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"walletAddressId\": \"{{secondWalletAddressId}}\",\n    \"receiveAmount\": null,\n    \"receiver\": \"{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}\",\n    \"debitAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 6,\n      \"value\": 5000000\n    }\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote",
					"id": "fd1ac731-98f6-47a2-96ab-d967936b3974",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetQuote($id: String!) {\n    quote(id: $id) {\n        createdAt\n        highEstimatedExchangeRate\n        expiresAt\n        id\n        lowEstimatedExchangeRate\n        maxPacketAmount\n        minExchangeRate\n        walletAddressId\n        receiveAmount {\n            assetCode\n            assetScale\n            value\n        }\n        receiver\n        debitAmount {\n            assetCode\n            assetScale\n            value\n        }\n    }\n}",
								"variables": "{\n    \"id\": \"{{quoteId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Outgoing Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f4978c-d3be-4637-b3e2-1ad68bff86cb",
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.environment.set(\"outgoingPaymentId\", body.data.createOutgoingPayment.payment.id);",
									"pm.expect(pm.environment.get(\"outgoingPaymentId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "36e8c687-4955-46cd-9d3a-cb6d8ca7c0b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateOutgoingPayment($input: CreateOutgoingPaymentInput!) {\n  createOutgoingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      error\n      metadata\n      id\n      walletAddressId\n      quote {\n        createdAt\n        expiresAt\n        highEstimatedExchangeRate\n        id\n        lowEstimatedExchangeRate\n        maxPacketAmount\n        minExchangeRate\n        walletAddressId\n        receiveAmount {\n          assetCode\n          assetScale\n          value\n        }\n        receiver\n        debitAmount {\n          assetCode\n          assetScale\n          value\n        }\n      }\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n      sentAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n      stateAttempts\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"metadata\": {\n        \"description\": null,\n        \"externalRef\": null\n    },\n    \"walletAddressId\": \"{{secondWalletAddressId}}\",\n    \"quoteId\": \"{{quoteId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Outgoing Payment",
					"id": "7467667d-5c3c-44bd-a419-4b20110aecb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetOutgoingPayment($id: String!) {\noutgoingPayment(id: $id) {\n    createdAt\n    error\n    metadata\n    id\n    walletAddressId\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n    receiveAmount {\n      assetCode\n      assetScale\n      value\n    }\n    receiver\n    debitAmount {\n      assetCode\n      assetScale\n      value\n    }\n    sentAmount {\n      assetCode\n      assetScale\n      value\n    }\n    state\n    stateAttempts\n  }\n}",
								"variables": "{\n    \"id\": \"{{outgoingPaymentId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payments",
					"id": "531f6d66-feca-4123-bb01-04dea329fd44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Payments($filter: PaymentFilter) {\n    payments(filter: $filter) {\n        edges {\n        node {\n            id\n            type\n            walletAddressId\n            state\n            metadata\n            createdAt\n        }\n        cursor\n        }\n    }\n}",
								"variables": "{          \n    \"filter\": {\n        \"type\": {\n            \"in\": [\"OUTGOING\"]\n        },\n        \"walletAddressId\": {\n           \"in\": [\"{{secondWalletAddressId}}\"]\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Event Liquidity",
					"id": "307d8391-3171-472c-8bf4-aab80e682e2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DepositEventLiquidity($input: DepositEventLiquidityInput!) {\n  depositEventLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"eventId\": \"b4f85d5c-652d-472d-873c-4ba2a5e39052\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Outgoing Payment Liquidity",
					"id": "8c7a355f-305e-45b0-88c9-0c85a1236a51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DepositOutgoingPaymentLiquidity($input: DepositOutgoingPaymentLiquidityInput!) {\n  depositOutgoingPaymentLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"outgoingPaymentId\": \"{{outgoingPaymentId}}\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Event Liquidity",
					"id": "ee82305f-6499-4c2b-8f5a-206cafb4c1b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation WithdrawEventLiquidity($input: WithdrawEventLiquidityInput!) {\n  withdrawEventLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"eventId\": \"b4f85d5c-652d-472d-873c-4ba2a5e39052\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Incoming Payment Liquidity",
					"id": "39e875d2-dd72-4f44-846f-9c58f1a036ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation WithdrawIncomingPaymentLiquidity($input: WithdrawIncomingPaymentLiquidityInput!) {\n  withdrawIncomingPaymentLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"incomingPaymentId\": \"{{incomingPaymentId}}\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{PeerGraphqlHost}}/graphql",
							"host": [
								"{{PeerGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Outgoing Payment Liquidity",
					"id": "8a56ae12-8bd9-4ae4-af91-92cd3adf86bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation WithdrawOutgoingPaymentLiquidity($input: WithdrawOutgoingPaymentLiquidityInput!) {\n  withdrawOutgoingPaymentLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"outgoingPaymentId\": \"{{outgoingPaymentId}}\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Wallet Address Withdrawal",
					"id": "bb1bc93a-3977-4f2c-987c-1c5e00081474",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateWalletAddressWithdrawal($input: CreateWalletAddressWithdrawalInput!) {\n  createWalletAddressWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n    withdrawal {\n      amount\n      id\n      walletAddress {\n        id\n        url\n        asset {\n          id\n          code\n          scale\n          withdrawalThreshold\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"02ac56f7-ae5d-4abb-8306-17bf2327b43c\",\n    \"walletAddressId\": \"{{walletAddressId}}\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trigger Wallet Address Events",
					"id": "a37c8186-08b3-459c-90d8-1632fb202b49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation TriggerWalletAddressEvents($input: TriggerWalletAddressEventsInput!) {\n  triggerWalletAddressEvents(input: $input) {\n    code\n    count\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"limit\": 5\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhook Events",
					"id": "949eba42-8f2d-4a41-8e97-8bf17f07c20d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query WebhookEvents($after: String, $before: String, $first: Int, $last: Int, $filter: WebhookEventFilter) {\n  webhookEvents(after: $after, before: $before, first:$first, last: $last, filter: $filter) {\n    edges {\n      cursor\n      node {\n        createdAt\n        data\n        id\n        type\n      }\n    }\n  }\n}",
								"variables": "{\n    \"filter\": {\n        \"type\": { \n            \"in\": []\n        }\n    },\n    \"after\": null,\n    \"before\": null,\n    \"first\": null,\n    \"last\": null\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Receiver (remote incoming payment) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2514980c-47b8-493b-b0fe-ed4d9a277561",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\nquery GetReceiver($id: String!) {\n    receiver(id: $id) {\n        id\n        walletAddressUrl\n        completed\n        expiresAt\n        incomingAmount {\n            value\n            assetCode\n            assetScale\n        }\n        receivedAmount {\n            value\n            assetCode\n            assetScale\n        }\n        metadata\n        createdAt\n        updatedAt\n    }\n}",
								"variables": "{\n    \"id\": \"{{receiverId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"id": "85d9bf20-bca7-483a-9063-f0783393d17c"
		},
		{
			"name": "Rafiki Admin Auth APIs",
			"item": [
				{
					"name": "Get Grant",
					"id": "b2d188b3-9484-465a-8239-91112dc7abdf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Grant($id: ID!) {\n    grant(id: $id) {\n        id\n        state\n        createdAt\n        client\n        access {\n            type\n            actions\n            createdAt\n            id\n            identifier\n            limits {\n                interval\n                receiveAmount {\n                    assetCode\n                    assetScale\n                    value\n                }\n                receiver\n                debitAmount {\n                    assetCode\n                    assetScale\n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"id\": \"056b3f93-7890-4005-9b24-2623d9cedab5\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiAuthGraphqlHost}}/graphql",
							"host": [
								"{{RafikiAuthGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Grants",
					"id": "7c297e91-311b-4079-bc9c-82236f80916f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Grants($after: String, $before: String, $first: Int, $last: Int, $filter: GrantFilter) {\n    grants(after: $after, before: $before, first: $first, last: $last, filter: $filter) {\n        edges {\n            cursor\n            node {\n                access {\n                    createdAt\n                    id\n                    identifier\n                    limits {\n                        interval\n                        receiveAmount {\n                            assetScale\n                            value\n                            assetCode\n                        }\n                        receiver\n                        debitAmount {\n                            assetCode\n                            assetScale\n                            value\n                        }\n                    }\n                    actions\n                    type\n                }\n                client\n                createdAt\n                id\n                state\n            }\n        }\n        pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n        }\n    }\n}\n",
								"variables": "{\n    \"after\": null,\n    \"before\": null,\n    \"first\": null,\n    \"last\": null,\n    \"filter\": {\n        \"state\": {\n            \"in\": [\"PROCESSING\", \"PENDING\", \"APPROVED\", \"FINALIZED\"]\n        },\n        \"finalizationReason\": {\n            \"notIn\": [\"REVOKED\"]\n        }\n    }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiAuthGraphqlHost}}/graphql",
							"host": [
								"{{RafikiAuthGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Grant",
					"id": "852aa6f2-fc5f-43ef-b872-3a4cff8da724",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation revokeGrant($input: RevokeGrantInput!) {\n    revokeGrant(input: $input) {\n        code\n        message\n        success\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"grantId\": \"e6684d05-6cc5-4a0e-a490-7ed05923fa89\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiAuthGraphqlHost}}/graphql",
							"host": [
								"{{RafikiAuthGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"id": "03b9f5e7-35d1-405c-ba4a-e52e03462961"
		},
		{
			"name": "Open Payments APIs",
			"item": [
				{
					"name": "Wallet Address",
					"item": [
						{
							"name": "Get a Wallet Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3f8dda8-d445-4b38-9c9a-9f41e5a87f04",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"receiverAssetCode\", body?.assetCode)",
											"pm.environment.set(\"receiverAssetScale\", body?.assetScale)",
											"",
											"const authUrl = url.parse(body?.authServer)",
											"if (",
											"    authUrl.hostname.includes('cloud-nine-wallet') || ",
											"    authUrl.hostname.includes('happy-life-bank')",
											"){",
											"    const port = authUrl.hostname.includes('cloud-nine-wallet') ",
											"        ? authUrl.port",
											"        : Number(authUrl.port) + 1000",
											"    pm.environment.set(\"receiverOpenPaymentsAuthHost\", authUrl.protocol + '//localhost:' + port );",
											"} else {",
											"    pm.environment.set(\"receiverOpenPaymentsAuthHost\", body?.authServer);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "881bb175-d30b-45d5-b257-0427a9f870f2",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7debb8e8-a353-4bdc-8588-554b6cd31e93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{receiverWalletAddress}}",
									"host": [
										"{{receiverWalletAddress}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Wallet Address Keys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2e2d0d22-d726-4795-b891-9f298a96c879",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{receiverWalletAddress}}/jwks.json",
									"host": [
										"{{receiverWalletAddress}}"
									],
									"path": [
										"jwks.json"
									]
								}
							},
							"response": []
						}
					],
					"id": "db109768-581a-42e0-8771-bd00fd38157e"
				},
				{
					"name": "Incoming Payments",
					"item": [
						{
							"name": "Create Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b66aa1a9-eb4b-40ff-ae66-b750b7a9d8e6",
										"exec": [
											"pm.environment.set(\"tomorrow\", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a128145-6f6a-434f-b683-88055cbfb94f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"incomingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f115e5d2-9ff2-4394-90e6-5bfe18d361bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"walletAddress\": \"{{clientWalletAddress}}\",\n    \"incomingAmount\": {\n        \"value\": \"2000\",\n        \"assetCode\": \"USD\",\n        \"assetScale\": 2\n    },\n    \"expiresAt\": \"{{tomorrow}}\",\n    \"metadata\": {\n        \"description\": \"Incoming Payment on Own Account\",\n        \"externalRef\": \"INV-001\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Incoming Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3dbbf4-6064-4a1a-b25a-fabf91809be0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31d10e12-744f-4166-8131-ced44931a4a0",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f49ca14-2cf9-4a7a-89b2-cd70ba379712",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments",
										"{{incomingPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Incoming Payment (Unauthenticated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48259d65-d250-4b7e-8fd6-d3eec36c4b7c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e73f56f5-496a-4c9e-851a-30b4f06264b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "43ea8bb4-d828-41d1-9a85-6964e22dc197",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"disabled": true
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments",
										"{{incomingPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Incoming Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c103e85b-77f0-42b3-a480-615a80c4d014",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64c316ef-a9a0-4972-98df-9fc8514fac44",
										"exec": [
											"request.url = request.url",
											"    .replace(/{{(receiverWalletAddress)}}/g, (_, key) => pm.environment.get(key))",
											"    .replace(/http:\\/\\/localhost:([3,4])000/g, (_, key) =>",
											"          key === '3'",
											"            ? 'https://' + pm.environment.get('host3000')",
											"            : 'https://' + pm.environment.get('host4000')",
											"    )",
											"console.log(request.url)",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))",
											"",
											"pm.request.url.query.idx(2).value = pm.request.url.query.idx(2).value",
											"    .replace(/{{([A-Za-z]\\w+)}}/g, (_, key) => pm.environment.get(key))",
											"    .replace(/http:\\/\\/localhost:([3,4])000/g, (_, key) =>",
											"          key === '3'",
											"            ? 'https://' + pm.environment.get('host3000')",
											"            : 'https://' + pm.environment.get('host4000')",
											"    )",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff2eb7b4-21a6-425e-aa95-17db7243409d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments?first=10&wallet-address={{receiverWalletAddress}}",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments"
									],
									"query": [
										{
											"key": "first",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "ea3bf38f-2719-4473-a0f7-4ba967d1d81b",
											"disabled": true
										},
										{
											"key": "wallet-address",
											"value": "{{receiverWalletAddress}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e09fae5-b084-4a45-b029-2a41577d64b3",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0801f29e-282f-4650-a7e4-29263981e75c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}/complete",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments",
										"{{incomingPaymentId}}",
										"complete"
									]
								}
							},
							"response": []
						}
					],
					"id": "c8e3afe0-605d-4c86-a2f3-1802e7b1ed59"
				},
				{
					"name": "Quotes",
					"item": [
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9202b415-17e9-4fbf-9301-39341dc0c566",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"quoteId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06c21d39-a108-4116-8bcd-967cc88033c8",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dc2cc649-543c-4dc7-a491-4f46274f7b36",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"receiver\": \"{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}\",\n    \"walletAddress\": \"{{senderWalletAddress}}\",\n    \"debitAmount\": {\n        \"value\": \"1000\",\n        \"assetCode\": \"{{receiverAssetCode}}\",\n        \"assetScale\": {{receiverAssetScale}}\n    },\n    \"method\": \"ilp\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/quotes",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c59a65d-e76c-440e-ad53-dc4f6f3ee5ac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef808ca5-d24e-4585-b32f-630781bc7085",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1428fd8-71c9-4ed3-bc8e-7eb90adbb581",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/quotes/{{quoteId}}",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"quotes",
										"{{quoteId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "9c0f3a66-0f14-4037-b356-d11deba69577"
				},
				{
					"name": "Outgoing Payments",
					"item": [
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0bbc5185-a82d-40e6-a6f4-873f1d66b48c",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd658b44-842b-4ac1-a07b-6399be9d5630",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"outgoingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cc262236-ede6-4d41-90e2-2d51a70f52a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"walletAddress\": {{senderWalletAddress}},\n    \"quoteId\": \"{{senderOpenPaymentsHost}}/quotes/{{quoteId}}\",\n    \"metadata\": {\n        \"description\": \"yolo\",\n        \"externalRef\": \"INV-001\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/outgoing-payments",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"outgoing-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d630fb81-f8b9-4968-9ae3-1a644a561fac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4fcd9dff-fa05-4594-8dfd-e58d0268d53a",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "287395c7-3944-4f32-b11b-b6142d221725",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/outgoing-payments/{{outgoingPaymentId}}",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"outgoing-payments",
										"{{outgoingPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Outgoing Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc299651-7fe8-4201-bf40-beab0c6d726a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a962ceb1-ca47-49c9-aa91-7aa071a1a239",
										"exec": [
											"request.url = request.url",
											"    .replace(/{{(senderWalletAddress)}}/g, (_, key) => pm.environment.get(key))",
											"    .replace(/http:\\/\\/localhost:([3,4])000/g, (_, key) =>",
											"          key === '3'",
											"            ? 'https://' + pm.environment.get('host3000')",
											"            : 'https://' + pm.environment.get('host4000')",
											"    )",
											"console.log(request.url)",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))",
											"",
											"pm.request.url.query.idx(2).value = pm.request.url.query.idx(2).value",
											"    .replace(/{{([A-Za-z]\\w+)}}/g, (_, key) => pm.environment.get(key))",
											"    .replace(/http:\\/\\/localhost:([3,4])000/g, (_, key) =>",
											"          key === '3'",
											"            ? 'https://' + pm.environment.get('host3000')",
											"            : 'https://' + pm.environment.get('host4000')",
											"    )",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a280f5e-e4a0-45ce-9e73-9377f3f62cdc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/outgoing-payments?first=2&wallet-address={{senderWalletAddress}}",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"outgoing-payments"
									],
									"query": [
										{
											"key": "first",
											"value": "2"
										},
										{
											"key": "cursor",
											"value": "ea3bf38f-2719-4473-a0f7-4ba967d1d81b",
											"disabled": true
										},
										{
											"key": "wallet-address",
											"value": "{{senderWalletAddress}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "72af4c2f-26b5-40df-aee8-652a27126d95"
				}
			],
			"id": "cecc8a1a-f11b-400a-9efc-ad29146feba4"
		},
		{
			"name": "Open Payments Auth APIs",
			"item": [
				{
					"name": "Grants",
					"item": [
						{
							"name": "Grant Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "773daca5-c40f-4815-8526-02d8ff17a3a7",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba41d85-6112-4ee0-8a38-a27964046e02",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "71e15c2b-d103-4207-9f52-83b239ec1894",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"quote\",\n                \"actions\": [\n                    \"create\", \"read\"\n                ]\n            },\n            {\n                \"type\": \"outgoing-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\"\n                ],\n                \"identifier\": \"{{senderWalletAddress}}\",\n                \"limits\": {\n                    \"debitAmount\": {\n                        \"value\": \"8000\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    },\n                    \"receiveAmount\": {\n                        \"value\": \"8000\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    }\n                }\n            }\n        ]\n    },\n    \"client\": \"{{clientWalletAddress}}\",\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"123\"\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsAuthHost}}/",
									"host": [
										"{{receiverOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Continuation Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3d634e3-0fc8-4da5-9eb1-3c44cea0398b",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c1a75ffa-6ee6-430c-a335-a05778b84928",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body.access_token.value);",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6e6971d0-3ff6-4bb0-ad97-95ee0085e744",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{continueToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"interact_ref\": \"fdfa9202-3e68-4c2a-8049-25135704a1cb\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsAuthHost}}/continue/{{continueId}}",
									"host": [
										"{{receiverOpenPaymentsAuthHost}}"
									],
									"path": [
										"continue",
										"{{continueId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "9f66b5cf-0f94-414d-bee9-4a0cc640f17a"
				},
				{
					"name": "Tokens",
					"item": [
						{
							"name": "Rotate Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e001a955-0490-499b-b2e2-df9900e98a85",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ed3c6b2-463d-4755-8ef4-e51bbc808f50",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body.access_token.value);",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "32762ec8-f0b0-4759-af79-3806f004f319",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{receiverOpenPaymentsAuthHost}}/token/{{tokenId}}",
									"host": [
										"{{receiverOpenPaymentsAuthHost}}"
									],
									"path": [
										"token",
										"{{tokenId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e630bee-d3f1-4601-9756-1937795f58bf",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8d13f020-fb76-477c-ac54-d3b5d1eddfcf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{receiverOpenPaymentsAuthHost}}/token/{{tokenId}}",
									"host": [
										"{{receiverOpenPaymentsAuthHost}}"
									],
									"path": [
										"token",
										"{{tokenId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "3206f1e0-e3f0-406e-91ce-572e5b92a12d"
				}
			],
			"id": "64a8bb2e-0241-4b34-9511-04908d591d85"
		},
		{
			"name": "Examples",
			"item": [
				{
					"name": "Open Payments",
					"item": [
						{
							"name": "Get sender wallet address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e0ecc67-6264-49a3-baa8-7a2bbb7b3c0c",
										"exec": [
											"const url = require('url')",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"senderAssetCode\", body?.assetCode)",
											"pm.environment.set(\"senderAssetScale\", body?.assetScale)",
											"",
											"const authUrl = url.parse(body?.authServer)",
											"if (",
											"    authUrl.hostname.includes('cloud-nine-wallet') || ",
											"    authUrl.hostname.includes('happy-life-bank')",
											"){",
											"    const port = authUrl.hostname.includes('cloud-nine-wallet') ",
											"        ? authUrl.port",
											"        : Number(authUrl.port) + 1000",
											"    pm.environment.set(\"senderOpenPaymentsAuthHost\", authUrl.protocol + '//localhost:' + port );",
											"} else {",
											"    pm.environment.set(\"senderOpenPaymentsAuthHost\", body?.authServer);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ded4a8d-9158-4adf-ade5-355d2fdb6d1f",
										"exec": [
											"const url = require('url')",
											"",
											"const requestUrl = url.parse(request.url",
											"  .replace(/{{([A-Za-z]\\w+)}}/g, (_, key) => pm.environment.get(key)))",
											"",
											"pm.environment.set(\"senderOpenPaymentsHost\", requestUrl.protocol + '//' + requestUrl.host);",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "66a8eca8-f7c4-40e0-bcfd-9b075e8a0d11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{senderWalletAddress}}",
									"host": [
										"{{senderWalletAddress}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get receiver wallet address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ccf24d4-d64c-4c85-b506-a8b8cae67d6d",
										"exec": [
											"const url = require('url')",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"receiverAssetCode\", body?.assetCode)",
											"pm.environment.set(\"receiverAssetScale\", body?.assetScale)",
											"",
											"const authUrl = url.parse(body?.authServer)",
											"if (",
											"    authUrl.hostname.includes('cloud-nine-wallet') || ",
											"    authUrl.hostname.includes('happy-life-bank')",
											"){",
											"    const port = authUrl.hostname.includes('cloud-nine-wallet') ",
											"        ? authUrl.port",
											"        : Number(authUrl.port) + 1000",
											"    pm.environment.set(\"receiverOpenPaymentsAuthHost\", authUrl.protocol + '//localhost:' + port );",
											"} else {",
											"    pm.environment.set(\"receiverOpenPaymentsAuthHost\", body?.authServer);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64c5fec0-0c57-40da-bbf4-4b2c46750cd3",
										"exec": [
											"const url = require('url')",
											"",
											"const requestUrl = url.parse(request.url",
											"  .replace(/{{([A-Za-z]\\w+)}}/g, (_, key) => pm.environment.get(key)))",
											"",
											"pm.environment.set(\"receiverOpenPaymentsHost\", requestUrl.protocol + '//' + requestUrl.host);",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5c59baf8-0832-4c05-8871-074d10a2893f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{receiverWalletAddress}}",
									"host": [
										"{{receiverWalletAddress}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Incoming Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcd1b8c0-a4dc-48b9-b439-537e02caa519",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c17ed24-ad9f-478c-8005-ccca9453d9ed",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7a54cd69-fc41-4796-b1e5-76ec3b0d86c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"incoming-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\", \"complete\"\n                ]\n            }\n        ]\n    },\n    \"client\": \"{{clientWalletAddress}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsAuthHost}}/",
									"host": [
										"{{receiverOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "301fd7ba-1d93-4117-be91-a54b5f59d8eb",
										"exec": [
											"pm.environment.set(\"tomorrow\", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());",
											"",
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c5baa8f-d41e-4d36-a12b-cc0cb330ed32",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"incomingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca3948c8-8e01-4488-9730-1029d3b39d4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"walletAddress\": \"{{receiverWalletAddress}}\",\n    \"incomingAmount\": {\n        \"value\": \"100\",\n        \"assetCode\": \"{{receiverAssetCode}}\",\n        \"assetScale\": {{receiverAssetScale}}\n    },\n    \"expiresAt\": \"{{tomorrow}}\",\n    \"metadata\": {\n        \"description\": \"Free Money!\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{receiverOpenPaymentsHost}}/incoming-payments",
									"host": [
										"{{receiverOpenPaymentsHost}}"
									],
									"path": [
										"incoming-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45e4c11e-5703-47b0-9ac4-bc9460a10fda",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cabc4376-e279-429e-a71b-9f0dcc2d041e",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1315c87f-fdc2-4140-9e5d-5321c69310f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"quote\",\n                \"actions\": [\n                    \"create\", \"read\"\n                ]\n            }\n        ]\n    },\n    \"client\": \"{{clientWalletAddress}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsAuthHost}}/",
									"host": [
										"{{senderOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37e20c81-6f16-44fa-b00d-4e8340d010cc",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"quoteId\", body.id.split(\"/\").pop());",
											"pm.environment.set(\"quoteDebitAmount\", JSON.stringify(body.debitAmount))",
											"pm.environment.set(\"quoteReceiveAmount\", JSON.stringify(body.receiveAmount))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b793ec1-d2d9-4307-bc38-58fc1722586e",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "565ce298-19e0-460b-aec6-bb85ab7a6198",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"walletAddress\": \"{{senderWalletAddress}}\",\n    \"receiver\": \"{{receiverOpenPaymentsHost}}/incoming-payments/{{incomingPaymentId}}\",\n    \"method\": \"ilp\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/quotes",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00954cef-62f3-49a5-9114-d5d7ea2359f3",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b67f8d34-7692-4b82-8ff5-09ce112b74e6",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "475bb298-2a06-4913-a5a4-93af3d627d8e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"outgoing-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\"\n                ],\n                \"identifier\": \"{{senderWalletAddress}}\",\n                \"limits\": {\n                    \"debitAmount\": {{quoteDebitAmount}},\n                    \"receiveAmount\": {{quoteReceiveAmount}}\n                }\n            }\n        ]\n    },\n    \"client\": \"{{clientWalletAddress}}\",\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"https://example.com\",\n            \"nonce\": \"456\"\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsAuthHost}}/",
									"host": [
										"{{senderOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Continuation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a26dd4-4333-4884-a087-eb90c60ed486",
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body.access_token.value);",
											"pm.environment.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85514203-92d3-41f9-b37b-bd118c6962c0",
										"exec": [
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1c05ced-5322-4076-8935-92dc36e48ddb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{continueToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"interact_ref\": \"6d519566-234f-4c2e-b56f-6d4a305fc067\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsAuthHost}}/continue/{{continueId}}",
									"host": [
										"{{senderOpenPaymentsAuthHost}}"
									],
									"path": [
										"continue",
										"{{continueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ca26350-097a-4d1e-930c-3880296f24b3",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0cd2986b-d97c-4bf1-9534-a9cac3cf9f2f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"outgoingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "74b0ca28-d9c2-41ec-8a18-987de26c575d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"walletAddress\": \"{{senderWalletAddress}}\",\n    \"quoteId\": \"{{senderWalletAddress}}/quotes/{{quoteId}}\",\n    \"metadata\": {\n        \"description\": \"Free Money!\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/outgoing-payments",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"outgoing-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1ff37df-f1e0-4797-a910-a7b7cbdcf1cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f9b1cac-268a-4e74-9b71-288eb25ec849",
										"exec": [
											"if(pm.environment.get('preRequestHost')){",
											"    eval(pm.environment.get('preRequestHost'))",
											"}",
											"eval(pm.environment.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cdd4c2e7-0231-4aa3-bb87-b74070a942c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{senderOpenPaymentsHost}}/outgoing-payments/{{outgoingPaymentId}}",
									"host": [
										"{{senderOpenPaymentsHost}}"
									],
									"path": [
										"outgoing-payments",
										"{{outgoingPaymentId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "0068984f-938b-4a79-b68f-9171ce2900d7"
				},
				{
					"name": "Admin API -  only locally",
					"item": [
						{
							"name": "Peer-to-Peer Payment",
							"item": [
								{
									"name": "Create Receiver (remote Incoming Payment)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ef31b80-cbdf-4e4a-8328-7746230dc513",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"receiverId\", body.data.createReceiver.receiver.id);",
													"pm.expect(pm.environment.get(\"receiverId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7d74b503-cb4e-4b27-8c14-27a2a081dba9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateReceiver($input: CreateReceiverInput!) {\n  createReceiver(input: $input) {\n    code\n    message\n    receiver {\n      completed\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      walletAddressUrl\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      updatedAt\n    }\n    success\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"metadata\": {\n        \"description\": \"For lunch!\"\n    },\n    \"incomingAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 2,\n      \"value\": 500\n    },\n    \"walletAddressUrl\": \"https://happy-life-bank-backend/accounts/pfry\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4661a75-24f9-453d-b39e-543c1fb8bbf5",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"quoteId\", body.data.createQuote.quote.id);",
													"pm.expect(pm.environment.get(\"quoteId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "659df8a6-6f21-468b-8b93-2ff4e6721240",
												"exec": [
													"",
													"const getWalletAddressesQuery = `",
													"query GetWalletAddresses {",
													"    walletAddresses {",
													"        edges {",
													"            cursor",
													"            node {",
													"                id",
													"                publicName",
													"                url",
													"            }",
													"        }",
													"    }",
													"}`",
													"",
													"const postRequest = {",
													"  url: `${pm.environment.get(\"RafikiGraphqlHost\")}/graphql`,",
													"  method: 'POST',",
													"  body: {",
													"    mode: 'graphql',",
													"    graphql: {",
													"        query:getWalletAddressesQuery",
													"    }",
													"  }",
													"};",
													"",
													"",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    const body = response.json();",
													"    const gfranklinWalletAddressId = body.data.walletAddresses.edges.map(e => e.node).find(node => node.publicName === 'Grace Franklin')?.id",
													"",
													"    pm.environment.set(\"gfranklinWalletAddressId\", gfranklinWalletAddressId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cf7d7bcf-2b85-4e86-be47-9a82eeb9c5b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    code\n    message\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"walletAddressId\": \"{{gfranklinWalletAddressId}}\",\n    \"receiver\": \"{{receiverId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Outgoing Payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71deca76-6536-4d0a-8a43-11cd9d4e8e3b",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"outgoingPaymentId\", body.data.createOutgoingPayment.payment.id);",
													"pm.expect(pm.environment.get(\"outgoingPaymentId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ef312df8-43b7-4e0b-960c-237e01bcc83b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateOutgoingPayment($input: CreateOutgoingPaymentInput!) {\n  createOutgoingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      error\n      metadata\n      id\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n      sentAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n      stateAttempts\n    }\n    success\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"walletAddressId\": \"{{gfranklinWalletAddressId}}\",\n    \"quoteId\": \"{{quoteId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Outgoing Payment",
									"id": "fa33917f-28dd-41a2-b985-a42a458c911b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetOutgoingPayment($id: String!) {\noutgoingPayment(id: $id) {\n    createdAt\n    error\n    metadata\n    id\n    walletAddressId\n    quote {\n      id\n    }\n    receiveAmount {\n      assetCode\n      assetScale\n      value\n    }\n    receiver\n    debitAmount {\n      assetCode\n      assetScale\n      value\n    }\n    sentAmount {\n      assetCode\n      assetScale\n      value\n    }\n    state\n    stateAttempts\n  }\n}",
												"variables": "{\n    \"id\": \"{{outgoingPaymentId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"id": "d81cab73-1471-49ff-90bd-1b6d3c86fc80"
						},
						{
							"name": "Peer-to-Peer Cross Currency Payment",
							"item": [
								{
									"name": "Create Receiver (remote Incoming Payment)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6750246-4459-4b81-9793-45c6171985a8",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"receiverId\", body.data.createReceiver.receiver.id);",
													"pm.expect(pm.environment.get(\"receiverId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "556b8851-a3f2-42fd-8216-e1f7095b52de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateReceiver($input: CreateReceiverInput!) {\n  createReceiver(input: $input) {\n    code\n    message\n    receiver {\n      completed\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      walletAddressUrl\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      updatedAt\n    }\n    success\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"metadata\": {\n        \"description\": \"cross-currency\"\n    },\n    \"incomingAmount\": {\n      \"assetCode\": \"EUR\",\n      \"assetScale\": 2,\n      \"value\": 500\n    },\n    \"walletAddressUrl\": \"https://happy-life-bank-backend/accounts/lars\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f12d8834-dc75-4bbd-b11b-e9cf71484dc4",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"quoteId\", body.data.createQuote.quote.id);",
													"pm.expect(pm.environment.get(\"quoteId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1536b6ee-877b-4d5b-a7ea-ece202335c03",
												"exec": [
													"",
													"const getWalletAddressesQuery = `",
													"query GetWalletAddresses {",
													"    walletAddresses {",
													"        edges {",
													"            cursor",
													"            node {",
													"                id",
													"                publicName",
													"                url",
													"            }",
													"        }",
													"    }",
													"}`",
													"",
													"const postRequest = {",
													"  url: `${pm.environment.get(\"RafikiGraphqlHost\")}/graphql`,",
													"  method: 'POST',",
													"  body: {",
													"    mode: 'graphql',",
													"    graphql: {",
													"        query:getWalletAddressesQuery",
													"    }",
													"  }",
													"};",
													"",
													"",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    const body = response.json();",
													"    const gfranklinWalletAddressId = body.data.walletAddresses.edges.map(e => e.node).find(node => node.publicName === 'Grace Franklin')?.id",
													"",
													"    pm.environment.set(\"gfranklinWalletAddressId\", gfranklinWalletAddressId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7c7d4cea-0181-4b97-aa9a-44e8b4c1f5c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    code\n    message\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"walletAddressId\": \"{{gfranklinWalletAddressId}}\",\n    \"receiver\": \"{{receiverId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Outgoing Payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ac6e0fe-863d-4599-932e-724c4fb4d5c5",
												"exec": [
													"const body = pm.response.json();",
													"",
													"pm.environment.set(\"outgoingPaymentId\", body.data.createOutgoingPayment.payment.id);",
													"pm.expect(pm.environment.get(\"outgoingPaymentId\")).to.be.a('string');"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "861db39a-02df-4d39-8c20-da1c2439232e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateOutgoingPayment($input: CreateOutgoingPaymentInput!) {\n  createOutgoingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      error\n      metadata\n      id\n      walletAddressId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      debitAmount {\n        assetCode\n        assetScale\n        value\n      }\n      sentAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n      stateAttempts\n    }\n    success\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"walletAddressId\": \"{{gfranklinWalletAddressId}}\",\n    \"quoteId\": \"{{quoteId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Outgoing Payment",
									"id": "8762d848-ca0a-4349-adf2-4c1c0b562d03",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetOutgoingPayment($id: String!) {\noutgoingPayment(id: $id) {\n    createdAt\n    error\n    metadata\n    id\n    walletAddressId\n    quote {\n      id\n    }\n    receiveAmount {\n      assetCode\n      assetScale\n      value\n    }\n    receiver\n    debitAmount {\n      assetCode\n      assetScale\n      value\n    }\n    sentAmount {\n      assetCode\n      assetScale\n      value\n    }\n    state\n    stateAttempts\n  }\n}",
												"variables": "{\n    \"id\": \"{{outgoingPaymentId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{RafikiGraphqlHost}}/graphql",
											"host": [
												"{{RafikiGraphqlHost}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"id": "3e3cb668-3e58-4d7d-a20a-79fb0ca52863"
						}
					],
					"id": "7e219e25-76d2-4949-9cd3-519ec80a6b49"
				}
			],
			"id": "f16166d3-a70d-4cd6-8c7c-ba7e35dd25ee"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}